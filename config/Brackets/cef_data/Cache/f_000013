[
    {
        "domain": "base",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "enableDebugger",
                "description": "Attempt to enable the debugger",
                "parameters": [],
                "returns": []
            },
            {
                "name": "restartNode",
                "description": "Attempt to restart the Node server",
                "parameters": [],
                "returns": []
            },
            {
                "name": "loadDomainModulesFromPaths",
                "description": "Attempt to load command modules from the given paths. The paths should be absolute.",
                "parameters": [
                    {
                        "name": "paths",
                        "type": "array<string>"
                    }
                ],
                "returns": [
                    {
                        "name": "success",
                        "type": "boolean"
                    }
                ]
            }
        ],
        "events": [
            {
                "name": "log",
                "parameters": [
                    {
                        "name": "level",
                        "type": "string"
                    },
                    {
                        "name": "timestamp",
                        "type": "Date"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    }
                ]
            },
            {
                "name": "newDomains",
                "parameters": []
            }
        ]
    },
    {
        "domain": "fileWatcher",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "watchPath",
                "description": "Start watching a file or directory",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the file or directory to watch"
                    },
                    {
                        "name": "ignored",
                        "type": "array",
                        "description": "list of path to ignore"
                    }
                ]
            },
            {
                "name": "unwatchPath",
                "description": "Stop watching a single file or a directory and it's descendants",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the file or directory to unwatch"
                    }
                ]
            },
            {
                "name": "unwatchAll",
                "description": "Stop watching all files and directories"
            }
        ],
        "events": [
            {
                "name": "change",
                "parameters": [
                    {
                        "name": "event",
                        "type": "string"
                    },
                    {
                        "name": "parentDirPath",
                        "type": "string"
                    },
                    {
                        "name": "entryName",
                        "type": "string"
                    },
                    {
                        "name": "statsObj",
                        "type": "object"
                    }
                ]
            }
        ]
    },
    {
        "domain": "nodeSocketTransport",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "start",
                "description": "Creates the WS server",
                "parameters": []
            },
            {
                "name": "send",
                "description": "Sends a message to a given client or list of clients",
                "parameters": [
                    {
                        "name": "idOrArray",
                        "type": "number|Array.<number>",
                        "description": "id or array of ids to send the message to"
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "description": "JSON message to send"
                    }
                ],
                "returns": []
            },
            {
                "name": "close",
                "description": "Closes the connection to a given client",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "description": "id of connection to close"
                    }
                ],
                "returns": []
            }
        ],
        "events": [
            {
                "name": "connect",
                "parameters": [
                    {
                        "name": "clientID",
                        "type": "number",
                        "description": "ID of live preview page connecting to live development"
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "description": "URL of page that live preview is connecting from"
                    }
                ]
            },
            {
                "name": "message",
                "parameters": [
                    {
                        "name": "clientID",
                        "type": "number",
                        "description": "ID of live preview page sending message"
                    },
                    {
                        "name": "msg",
                        "type": "string",
                        "description": "JSON message from client page"
                    }
                ]
            },
            {
                "name": "close",
                "parameters": [
                    {
                        "name": "clientID",
                        "type": "number",
                        "description": "ID of live preview page being closed"
                    }
                ]
            }
        ]
    },
    {
        "domain": "launcher",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "launch",
                "description": "Launches a given HTML file in the browser for live development",
                "parameters": [
                    {
                        "name": "url",
                        "type": "string",
                        "description": "file:// url to the HTML file"
                    },
                    {
                        "name": "browser",
                        "type": "string",
                        "description": "browser name"
                    }
                ],
                "returns": []
            }
        ],
        "events": []
    },
    {
        "domain": "LanguageClientInfo",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "initialize",
                "description": "Initialize node environment for Language Client Module",
                "parameters": [
                    {
                        "name": "bracketsSourcePath",
                        "type": "string",
                        "description": "Absolute path to the brackets source"
                    },
                    {
                        "name": "toolingInfo",
                        "type": "object",
                        "description": "Tooling Info json to be used by Language Client"
                    }
                ],
                "returns": []
            },
            {
                "name": "syncPreferences",
                "description": "Sync language tools preferences for Language Client Module",
                "parameters": [
                    {
                        "name": "prefs",
                        "type": "object",
                        "description": "Language tools preferences"
                    }
                ],
                "returns": []
            }
        ],
        "events": []
    },
    {
        "domain": "webSocketTransport",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "start",
                "description": "Creates the WS server",
                "parameters": [
                    {
                        "name": "port",
                        "type": "number",
                        "description": "Port on which server needs to listen"
                    }
                ],
                "returns": []
            },
            {
                "name": "close",
                "description": "Kills the websocket server",
                "parameters": []
            }
        ],
        "events": [
            {
                "name": "message",
                "parameters": [
                    {
                        "name": "msg",
                        "type": "string",
                        "description": "JSON message from client page"
                    }
                ]
            }
        ]
    },
    {
        "domain": "FindInFiles",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "doSearch",
                "description": "Searches in project files and returns matches",
                "parameters": [
                    {
                        "name": "searchObject",
                        "type": "object",
                        "description": "Object containing search data"
                    }
                ],
                "returns": [
                    {
                        "name": "searchResults",
                        "type": "object",
                        "description": "Object containing results of the search"
                    }
                ]
            },
            {
                "name": "nextPage",
                "description": "get the next page of reults",
                "parameters": [],
                "returns": [
                    {
                        "name": "searchResults",
                        "type": "object",
                        "description": "Object containing results of the search"
                    }
                ]
            },
            {
                "name": "getAllResults",
                "description": "get the next page of reults",
                "parameters": [],
                "returns": [
                    {
                        "name": "searchResults",
                        "type": "object",
                        "description": "Object containing all results of the search"
                    }
                ]
            },
            {
                "name": "collapseResults",
                "description": "get the next page of reults",
                "parameters": [
                    {
                        "name": "collapse",
                        "type": "boolean",
                        "description": "true to collapse"
                    }
                ],
                "returns": []
            },
            {
                "name": "filesChanged",
                "description": "files in the project has been changed, update cache",
                "parameters": [
                    {
                        "name": "updateObject",
                        "type": "object",
                        "description": "Object containing list of changed files"
                    }
                ],
                "returns": []
            },
            {
                "name": "documentChanged",
                "description": "informs that the document changed and updates the cache",
                "parameters": [
                    {
                        "name": "updateObject",
                        "type": "object",
                        "description": "update with the contents of the object"
                    }
                ],
                "returns": []
            },
            {
                "name": "filesRemoved",
                "description": "Searches in project files and returns matches",
                "parameters": [
                    {
                        "name": "updateObject",
                        "type": "object",
                        "description": "Object containing list of removed files"
                    }
                ],
                "returns": []
            },
            {
                "name": "initCache",
                "description": "Caches the project for find in files in node",
                "parameters": [
                    {
                        "name": "fileList",
                        "type": "Array",
                        "description": "List of all project files - Path only"
                    }
                ],
                "returns": []
            }
        ],
        "events": [
            {
                "name": "crawlComplete",
                "parameters": [
                    {
                        "name": "numFiles",
                        "type": "number",
                        "description": "number of files cached"
                    },
                    {
                        "name": "cacheSize",
                        "type": "number",
                        "description": "The size of the file cache epressesd as string length of files"
                    }
                ]
            }
        ]
    },
    {
        "domain": "staticServer",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "_setRequestFilterTimeout",
                "description": "Unit tests only. Set timeout value for filtered requests.",
                "parameters": [
                    {
                        "name": "timeout",
                        "type": "number",
                        "description": "Duration to wait before passing a filtered request to the static file server."
                    }
                ],
                "returns": []
            },
            {
                "name": "getServer",
                "description": "Starts or returns an existing server for the given path.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "Absolute filesystem path for root of server."
                    },
                    {
                        "name": "port",
                        "type": "number",
                        "description": "Port number to use for HTTP server.  Pass zero to assign a random port."
                    }
                ],
                "returns": [
                    {
                        "name": "address",
                        "type": "{address: string, family: string, port: number}",
                        "description": "hostname (stored in 'address' parameter), port, and socket type (stored in 'family' parameter) for the server. Currently, 'family' will always be 'IPv4'."
                    }
                ]
            },
            {
                "name": "closeServer",
                "description": "Closes the server for the given path.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path for root of server"
                    }
                ],
                "returns": [
                    {
                        "name": "result",
                        "type": "boolean",
                        "description": "indicates whether a server was found for the specific path then closed"
                    }
                ]
            },
            {
                "name": "setRequestFilterPaths",
                "description": "Defines a set of paths from a server's root path to watch and fire 'requestFilter' events for.",
                "parameters": [
                    {
                        "name": "root",
                        "type": "string",
                        "description": "absolute filesystem path for root of server"
                    },
                    {
                        "name": "paths",
                        "type": "Array",
                        "description": "path to notify"
                    }
                ],
                "returns": []
            },
            {
                "name": "writeFilteredResponse",
                "description": "Overrides the server response from static middleware with the provided response data. This should be called only in response to a filtered request.",
                "parameters": [
                    {
                        "name": "root",
                        "type": "string",
                        "description": "absolute filesystem path for root of server"
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "description": "path to rewrite"
                    },
                    {
                        "name": "resData",
                        "type": "{body: string, headers: Array}",
                        "description": "TODO"
                    }
                ],
                "returns": []
            }
        ],
        "events": [
            {
                "name": "requestFilter",
                "parameters": [
                    {
                        "name": "location",
                        "type": "{hostname: string, pathname: string, port: number, root: string: id: number}",
                        "description": "request path"
                    }
                ]
            }
        ]
    },
    {
        "domain": "zaggino.brackets-eslint",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "lintFile",
                "description": "lint given file with eslint",
                "parameters": [
                    {
                        "name": "projectRoot",
                        "type": "string"
                    },
                    {
                        "name": "fullPath",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "type": "string"
                    },
                    {
                        "name": "useLocalESLint",
                        "type": "boolean"
                    }
                ],
                "returns": [
                    {
                        "name": "report",
                        "type": "object"
                    }
                ]
            },
            {
                "name": "fixFile",
                "description": "Fixes the current file using the ESLint auto-fixing feature",
                "parameters": [
                    {
                        "name": "projectRoot",
                        "type": "string"
                    },
                    {
                        "name": "fullPath",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "type": "string"
                    }
                ]
            }
        ],
        "events": []
    },
    {
        "domain": "extensionManager",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "validate",
                "description": "Verifies that the contents of the given ZIP file are a valid Brackets extension package",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the extension package"
                    },
                    {
                        "name": "options",
                        "type": "{requirePackageJSON: ?boolean}",
                        "description": "options to control the behavior of the validator"
                    }
                ],
                "returns": [
                    {
                        "name": "errors",
                        "type": "string|Array.<string>",
                        "description": "download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"
                    },
                    {
                        "name": "metadata",
                        "type": "{name: string, version: string}",
                        "description": "all package.json metadata (null if there's no package.json)"
                    }
                ]
            },
            {
                "name": "install",
                "description": "Installs the given Brackets extension if it is valid (runs validation command automatically)",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the extension package"
                    },
                    {
                        "name": "destinationDirectory",
                        "type": "string",
                        "description": "absolute filesystem path where this extension should be installed"
                    },
                    {
                        "name": "options",
                        "type": "{disabledDirectory: !string, apiVersion: !string, nameHint: ?string, systemExtensionDirectory: !string, proxy: ?string}",
                        "description": "installation options: disabledDirectory should be set so that extensions can be installed disabled."
                    }
                ],
                "returns": [
                    {
                        "name": "errors",
                        "type": "string|Array.<string>",
                        "description": "download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"
                    },
                    {
                        "name": "metadata",
                        "type": "{name: string, version: string}",
                        "description": "all package.json metadata (null if there's no package.json)"
                    },
                    {
                        "name": "disabledReason",
                        "type": "string",
                        "description": "reason this extension was installed disabled (one of Errors.*), none if it was enabled"
                    },
                    {
                        "name": "installationStatus",
                        "type": "string",
                        "description": "Current status of the installation (an extension can be valid but not installed because it's an update"
                    },
                    {
                        "name": "installedTo",
                        "type": "string",
                        "description": "absolute path where the extension was installed to"
                    },
                    {
                        "name": "commonPrefix",
                        "type": "string",
                        "description": "top level directory in the package zip which contains all of the files"
                    }
                ]
            },
            {
                "name": "update",
                "description": "Updates the given Brackets extension (for which install was generally previously attemped). Brackets must be quit after this.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the extension package"
                    },
                    {
                        "name": "destinationDirectory",
                        "type": "string",
                        "description": "absolute filesystem path where this extension should be installed"
                    },
                    {
                        "name": "options",
                        "type": "{disabledDirectory: !string, apiVersion: !string, nameHint: ?string, systemExtensionDirectory: !string}",
                        "description": "installation options: disabledDirectory should be set so that extensions can be installed disabled."
                    }
                ],
                "returns": [
                    {
                        "name": "errors",
                        "type": "string|Array.<string>",
                        "description": "download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"
                    },
                    {
                        "name": "metadata",
                        "type": "{name: string, version: string}",
                        "description": "all package.json metadata (null if there's no package.json)"
                    },
                    {
                        "name": "disabledReason",
                        "type": "string",
                        "description": "reason this extension was installed disabled (one of Errors.*), none if it was enabled"
                    },
                    {
                        "name": "installationStatus",
                        "type": "string",
                        "description": "Current status of the installation (an extension can be valid but not installed because it's an update"
                    },
                    {
                        "name": "installedTo",
                        "type": "string",
                        "description": "absolute path where the extension was installed to"
                    },
                    {
                        "name": "commonPrefix",
                        "type": "string",
                        "description": "top level directory in the package zip which contains all of the files"
                    }
                ]
            },
            {
                "name": "remove",
                "description": "Removes the Brackets extension at the given path.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the installed extension folder"
                    }
                ],
                "returns": {}
            },
            {
                "name": "downloadFile",
                "description": "Downloads the file at the given URL, saving it to a temp location. Callback receives path to the downloaded file.",
                "parameters": [
                    {
                        "name": "downloadId",
                        "type": "string",
                        "description": "Unique identifier for this download 'session'"
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "description": "URL to download from"
                    },
                    {
                        "name": "proxy",
                        "type": "string",
                        "description": "optional proxy URL"
                    }
                ],
                "returns": {
                    "type": "string",
                    "description": "Local path to the downloaded file"
                }
            },
            {
                "name": "abortDownload",
                "description": "Aborts any pending download with the given id. Ignored if no download pending (may be already complete).",
                "parameters": [
                    {
                        "name": "downloadId",
                        "type": "string",
                        "description": "Unique identifier for this download 'session', previously pased to downloadFile"
                    }
                ],
                "returns": {
                    "type": "boolean",
                    "description": "True if the download was pending and able to be canceled; false otherwise"
                }
            }
        ],
        "events": []
    },
    {
        "domain": "PhpClient",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "data",
                "description": "Receives sync request from brackets",
                "parameters": [
                    {
                        "name": "params",
                        "type": "object",
                        "description": "json object containing message info"
                    }
                ],
                "returns": []
            },
            {
                "name": "response",
                "description": "Receives response from brackets for an earlier request",
                "parameters": [
                    {
                        "name": "params",
                        "type": "object",
                        "description": "json object containing message info"
                    }
                ],
                "returns": []
            },
            {
                "name": "asyncData",
                "description": "Receives async call request from brackets",
                "parameters": [
                    {
                        "name": "params",
                        "type": "object",
                        "description": "json object containing message info"
                    },
                    {
                        "name": "resolver",
                        "type": "function",
                        "description": "callback required to resolve the async request"
                    }
                ],
                "returns": []
            }
        ],
        "events": [
            {
                "name": "data",
                "parameters": [
                    {
                        "name": "params",
                        "type": "object",
                        "description": "json object containing message info to pass to brackets"
                    }
                ]
            }
        ]
    },
    {
        "domain": "TernNodeDomain",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "invokeTernCommand",
                "description": "Invokes a tern command on node",
                "parameters": [
                    {
                        "name": "commandConfig",
                        "type": "object",
                        "description": "Object containing tern command configuration"
                    }
                ]
            },
            {
                "name": "setInterface",
                "description": "Sets the shared message interface",
                "parameters": [
                    {
                        "name": "msgInterface",
                        "type": "object",
                        "description": "Object containing messageId enums"
                    }
                ]
            },
            {
                "name": "resetTernServer",
                "description": "Resets an existing tern server"
            }
        ],
        "events": [
            {
                "name": "data",
                "parameters": [
                    {
                        "name": "data",
                        "type": "Object",
                        "description": "data to be returned to main thread"
                    }
                ]
            }
        ]
    }
]